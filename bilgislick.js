(function(factory){iftypeofdefine:== function && define.amd) { define(['jquery'],factory)}else if (typeof exports !== undefined){moduleexports:factory(require(jquery))}(function($){varslick:window.Slick || {};
Slick = (function(){varinstanceuid:0;functionslickelementsettingsvar_:this,dataSettings;_defaults:{ accessibility: true,adaptiveHeight: false,appendArrows: $(element),appendDots: $(element),arrows: true,asNavFor: null,prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',autoplay: false,autoplaySpeed: 3000,centerMode: false,centerPadding: 50px,cssEase: ease,customPaging: function(slider,i) { return $('<button type="button" data-role="none" role="button" tabindex="0" />').text(i + 1)};
_.initials ={animating:false,dragging: false,autoPlayTimer: null,currentDirection: 0,currentLeft: null,currentSlide: 0,;direction:1,$dots: null,listWidth: null,listHeight: null,loadIndex: 0,$nextArrow: null,$prevArrow: null,slideCount: null,slideWidth: null,$slideTrack: null,$slides: null,sliding: false,slideOffset: 0,swipeLeft: null,$list: null,touchObject: {},_.defaults,settings,dataSettings);
_.currentSlide = _.options.initialSlide;
_.originalSettings = _.options;
if (typeof document.mozHidden !== undefined){_hidden:mozHidden;_visibilitychange:mozvisibilitychange}else if (typeof document.webkitHidden !== undefined){_hidden:webkitHidden;_visibilitychange:webkitvisibilitychange}());
Slick.prototype.activateADA = function(){var_:this;_slidetrackfindslick-activeattraria-hidden:false}).find('a, input, button, select').attr({'tabindex:0};
Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup,index,addBefore){var_:this;iftypeofindex:== boolean) { addBefore = index;index:null}_.unload();
if (typeof(index) === number){ifindex:== 0 && _.$slides.length === 0) { $(markup).appendTo(_.$slideTrack)}else{ifaddbefore:== true) { $(markup).prependTo(_.$slideTrack)};
Slick.prototype.animateHeight = function(){var_:this;if_optionsslidestoshow:== 1 && _.options.adaptiveHeight === true && _.options.vertical === false) { var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);_listanimateheight:targetHeight};
Slick.prototype.animateSlide = function(targetLeft,callback){varanimprops:{},_ = this;
_.animateHeight();
if (_.options.rtl === true && _.options.vertical === false){targetleft:-targetLeft}if (_.transformsEnabled === false){if_optionsvertical:== false) { _.$slideTrack.animate({ left: targetLeft },_.options.speed,_.options.easing,callback)}else{_slidetrackanimatetop:targetLeft}else{if_csstransitions:== false) { if (_.options.rtl === true) { _.currentLeft = -(_.currentLeft)}$({animstart:_.currentLeft}).animate({animstart:targetLeft},{duration:_.options.speed,easing: _.options.easing,step: function(now) { now = Math.ceil(now);if_optionsvertical:== false) { animProps[_.animType] = translate( + now + 'px,0px)'}else{animprops_animtype:translate(0px,+ now + px)}else{targetleft:Math.ceil(targetLeft);if_optionsvertical:== false) { animProps[_.animType] = translate3d( + targetLeft + 'px,0px,0px)'}else{animprops_animtype:translate3d(0px,+ targetLeft + 'px,0px)'};
Slick.prototype.getNavTarget = function(){var_:this,asNavFor = _.options.asNavFor;ifasnavforasnavfor:= null ) { asNavFor = $(asNavFor).not(_.$slider)};
Slick.prototype.asNavFor = function(index){var_:this,asNavFor = _.getNavTarget();ifasnavfor:= null && typeof asNavFor === object ) { asNavFor.each(function() { var target = $(this).slick(getSlick); if(!target.unslicked) { target.slideHandler(index,true); } })};
Slick.prototype.applyTransition = function(slide){var_:this,transition = {};
if (_.options.fade === false){transition_transitiontype:_.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase}else{transition_transitiontype:'opacity ' + _.options.speed + 'ms ' + _.options.cssEase};
Slick.prototype.autoPlay = function(){var_:this;if_slidecount_optionsslidestoshow_autoplaytimer:setInterval(_.autoPlayIterator,_.options.autoplaySpeed)};
Slick.prototype.autoPlayClear = function(){var_:this};
Slick.prototype.autoPlayIterator = function(){var_:this,slideTo = _.currentSlide + _.options.slidesToScroll;if_paused_interrupted_focussedif_optionsinfinite:== false ) { if (_.direction === 1 && (_.currentSlide + 1) === (_.slideCount - 1)) { _.direction = 0}else if ( _.direction === 0 ){slideto:_.currentSlide - _.options.slidesToScroll;if_currentslide-1:== 0 ) { _.direction = 1};
Slick.prototype.buildArrows = function(){var_:this;if_optionsarrows:== true ) { _.$prevArrow = $(_.options.prevArrow).addClass(slick-arrow);_nextarrow:$(_.options.nextArrow).addClass(slick-arrow)}else{_prevarrowadd_nextarrowaddclassslick-hiddenattraria-disabled:true,tabindex: -1};
Slick.prototype.buildDots = function(){var_:this,i,dot;if_optionsdots:== true && _.slideCount > _.options.slidesToShow) { _.$slider.addClass(slick-dotted);dot:$('<ul />').addClass(_.options.dotsClass);fori:0;i:_.getDotCount();i:1) { dot.append($('<li />').append(_.options.customPaging.call(this,_,i)))};
Slick.prototype.buildOut = function(){var_:this;_slides:_.$slider .children(_.options.slide + ':not(.slick-cloned)') .addClass(slick-slide);_slidecount:_.$slides.length});
_.$slider.addClass(slick-slider);
_.$slideTrack = (_.slideCount === 0) ?
$('<div class="slick-track"/>').appendTo(_.$slider) :
_.$slides.wrapAll('<div class="slick-track"/>').parent();
_.$list = _.$slideTrack.wrap(
'<div aria-live="polite" class="slick-list"/>').parent();
_.$slideTrack.css(opacity,0);
if (_.options.centerMode === true || _.options.swipeToSlide === true){_optionsslidestoscroll:1};
Slick.prototype.buildRows = function(){var_:this,a,b,c,newSlides,numOfSlides,originalSlides,slidesPerSection;newslides:document.createDocumentFragment();originalslides:_.$slider.children();if_optionsrows1slidespersection:_.options.slidesPerRow * _.options.rows;numofslides:Math.ceil(originalSlides.length / slidesPerSection);fora:0;avarslide:document.createElement(div);forb:0;bvarrow:document.createElement(div);forc:0;cvartarget:(a * slidesPerSection + ((b * _.options.slidesPerRow) + c))}_.$slider.empty().append(newSlides);
_.$slider.children().children().children()
.css({'width:(100 / _.options.slidesPerRow) + %,display: inline-block};
Slick.prototype.checkResponsive = function(initial,forceUpdate){var_:this,breakpoint,targetBreakpoint,respondToWidth,triggerBreakpoint = false;varsliderwidth:_.$slider.width();varwindowwidth:window.innerWidth || $(window).width();if_respondto:== window) { respondToWidth = windowWidth}else if (_.respondTo === slider){respondtowidth:sliderWidth}else if (_.respondTo === min){respondtowidth:Math.min(windowWidth,sliderWidth)}if ( _.options.responsive &&
_.options.responsive.length &&
_.options.responsive !== null){targetbreakpoint:null;forbreakpointin_breakpointsif_breakpointshasownpropertybreakpointif_originalsettingsmobilefirst:== false) { if (respondToWidth < _.breakpoints[breakpoint]) { targetBreakpoint = _.breakpoints[breakpoint]}else{ifrespondtowidth_breakpointsbreakpointtargetbreakpoint:_.breakpoints[breakpoint]}if (targetBreakpoint !== null){if_activebreakpoint:= null) { if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) { _.activeBreakpoint = targetBreakpoint;if_breakpointsettingstargetbreakpoint:== unslick) { _.unslick(targetBreakpoint)}else{_options:$.extend({},_.originalSettings,_.breakpointSettings[ targetBreakpoint]);ifinitial:== true) { _.currentSlide = _.options.initialSlide}else{_activebreakpoint:targetBreakpoint;if_breakpointsettingstargetbreakpoint:== unslick) { _.unslick(targetBreakpoint)}else{_options:$.extend({},_.originalSettings,_.breakpointSettings[ targetBreakpoint]);ifinitial:== true) { _.currentSlide = _.options.initialSlide}else{if_activebreakpoint:= null) { _.activeBreakpoint = null;_options:_.originalSettings;ifinitial:== true) { _.currentSlide = _.options.initialSlide};
Slick.prototype.changeSlide = function(event,dontAnimate){var_:this,$target = $(event.currentTarget),indexOffset,slideOffset,unevenOffset}// If target is not the <li> element (ie: a child),find the <li>.
if(!$target.is(li)){$target:$target.closest(li)}unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;
switch (event.data.message){caseprevious:slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset};
Slick.prototype.checkNavigable = function(index){var_:this,navigables,prevNavigable;navigables:_.getNavigableIndexes();prevnavigable:0;ifindexnavigablesnavigableslength-1index:navigables[navigables.length - 1]}else{forvarninnavigablesifindexnavigablesnindex:prevNavigable};
Slick.prototype.cleanUpEvents = function(){var_:this;if_optionsdots_dots:= null) { $(li,_.$dots) .off(click.slick,_.changeSlide) .off(mouseenter.slick,$.proxy(_.interrupt,_,true)) .off(mouseleave.slick,$.proxy(_.interrupt,_,false))};
Slick.prototype.cleanUpSlideEvents = function(){var_:this};
Slick.prototype.cleanUpRows = function(){var_:this,originalSlides;if_optionsrows1originalslides:_.$slides.children().children()};
Slick.prototype.clickHandler = function(event){var_:this;if_shouldclick:== false) { event.stopImmediatePropagation()};
Slick.prototype.destroy = function(refresh){var_:this;_touchobject:{};
Slick.prototype.disableTransition = function(slide){var_:this,transition = {};
Slick.prototype.fadeSlide = function(slideIndex,callback){var_:this;if_csstransitions:== false) { _.$slides.eq(slideIndex).css({ zIndex: _.options.zIndex });_slideseqslideindexanimateopacity:1}else{_slideseqslideindexcssopacity:1,zIndex: _.options.zIndex};
Slick.prototype.fadeSlideOut = function(slideIndex){var_:this;if_csstransitions:== false) { _.$slides.eq(slideIndex).animate({ opacity: 0,zIndex: _.options.zIndex - 2 },_.options.speed,_.options.easing)}else{_slideseqslideindexcssopacity:0,zIndex: _.options.zIndex - 2};
Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter){var_:this;iffilter:= null) { _.$slidesCache = _.$slides};
Slick.prototype.focusHandler = function(){var_:this;_sliderofffocusslickblurslickonfocusslickblurslick:not(.slick-arrow)',function(event) {\A\A event.stopImmediatePropagation();\A var $sf = $(this);\A\A setTimeout(function() {\A\A if( _.options.pauseOnFocus ) {\A _.focussed = $sf.is(':focus');\A _.autoPlay();\A }\A\A },0);\A\A });\A };\A\A Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {\A\A var _ = this;\A return _.currentSlide;\A\A };\A\A Slick.prototype.getDotCount = function() {\A\A var _ = this;\A\A var breakPoint = 0;\A var counter = 0;\A var pagerQty = 0;\A\A if (_.options.infinite === true) {\A while (breakPoint < _.slideCount) {\A ++pagerQty;\A breakPoint = counter + _.options.slidesToScroll;\A counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\A }\A } else if (_.options.centerMode === true) {\A pagerQty = _.slideCount;\A } else if(!_.options.asNavFor) {\A pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);\A }else {\A while (breakPoint < _.slideCount) {\A ++pagerQty;\A breakPoint = counter + _.options.slidesToScroll;\A counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\A }\A }\A\A return pagerQty - 1;\A\A };\A\A Slick.prototype.getLeft = function(slideIndex) {\A\A var _ = this,\A targetLeft,\A verticalHeight,\A verticalOffset = 0,\A targetSlide;\A\A _.slideOffset = 0;\A verticalHeight = _.$slides.first().outerHeight(true);\A\A if (_.options.infinite === true) {\A if (_.slideCount > _.options.slidesToShow) {\A _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;\A verticalOffset = (verticalHeight * _.options.slidesToShow) * -1;\A }\A if (_.slideCount % _.options.slidesToScroll !== 0) {\A if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {\A if (slideIndex > _.slideCount) {\A _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;\A verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;\A } else {\A _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;\A verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;\A }\A }\A }\A } else {\A if (slideIndex + _.options.slidesToShow > _.slideCount) {\A _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;\A verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;\A }\A }\A\A if (_.slideCount <= _.options.slidesToShow) {\A _.slideOffset = 0;\A verticalOffset = 0;\A }\A\A if (_.options.centerMode === true && _.options.infinite === true) {\A _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;\A } else if (_.options.centerMode === true) {\A _.slideOffset = 0;\A _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);\A }\A\A if (_.options.vertical === false) {\A targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;\A } else {\A targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;\A }\A\A if (_.options.variableWidth === true) {\A\A if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\A targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\A } else {\A targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);\A }\A\A if (_.options.rtl === true) {\A if (targetSlide[0]) {\A targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\A } else {\A targetLeft = 0;\A }\A } else {\A targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\A }\A\A if (_.options.centerMode === true) {\A if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\A targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\A } else {\A targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);\A }\A\A if (_.options.rtl === true) {\A if (targetSlide[0]) {\A targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\A } else {\A targetLeft = 0;\A }\A } else {\A targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\A }\A\A targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;\A }\A }\A\A return targetLeft;\A\A };\A\A Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {\A\A var _ = this;\A\A return _.options[option];\A\A };\A\A Slick.prototype.getNavigableIndexes = function() {\A\A var _ = this,\A breakPoint = 0,\A counter = 0,\A indexes = [],\A max;\A\A if (_.options.infinite === false) {\A max = _.slideCount;\A } else {\A breakPoint = _.options.slidesToScroll * -1;\A counter = _.options.slidesToScroll * -1;\A max = _.slideCount * 2;\A }\A\A while (breakPoint < max) {\A indexes.push(breakPoint);\A breakPoint = counter + _.options.slidesToScroll;\A counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\A }\A\A return indexes;\A\A };\A\A Slick.prototype.getSlick = function() {\A\A return this;\A\A };\A\A Slick.prototype.getSlideCount = function() {\A\A var _ = this,\A slidesTraversed,swipedSlide,centerOffset;\A\A centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;\A\A if (_.options.swipeToSlide === true) {\A _.$slideTrack.find('.slick-slide').each(function(index,slide) {\A if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {\A swipedSlide = slide;\A return false;\A }\A });\A\A slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;\A\A return slidesTraversed;\A\A } else {\A return _.options.slidesToScroll;\A }\A\A };\A\A Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide,dontAnimate) {\A\A var _ = this;\A\A _.changeSlide({\A data: {\A message: 'index',\A index: parseInt(slide)\A }\A },dontAnimate);\A\A };\A\A Slick.prototype.init = function(creation) {\A\A var _ = this;\A\A if (!$(_.$slider).hasClass('slick-initialized')) {\A\A $(_.$slider).addClass('slick-initialized');\A\A _.buildRows();\A _.buildOut();\A _.setProps();\A _.startLoad();\A _.loadSlider();\A _.initializeEvents();\A _.updateArrows();\A _.updateDots();\A _.checkResponsive(true);\A _.focusHandler();\A\A }\A\A if (creation) {\A _.$slider.trigger('init',[_]);\A }\A\A if (_.options.accessibility === true) {\A _.initADA();\A }\A\A if ( _.options.autoplay ) {\A\A _.paused = false;\A _.autoPlay();\A\A }\A\A };\A\A Slick.prototype.initADA = function() {\A var _ = this;\A _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({\A 'aria-hidden': 'true',\A 'tabindex': '-1'\A }).find('a,input,button,select').attr({\A 'tabindex': '-1'\A });\A\A _.$slideTrack.attr('role','listbox');\A\A _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {\A $(this).attr({\A 'role': 'option',\A 'aria-describedby': 'slick-slide' + _.instanceUid + i + ''\A });\A });\A\A if (_.$dots !== null) {\A _.$dots.attr('role','tablist).find(li').each(function(i) {\A $(this).attr({\A 'role': 'presentation',\A 'aria-selected': 'false',\A 'aria-controls': 'navigation' + _.instanceUid + i + '',\A 'id': 'slick-slide' + _.instanceUid + i + ''\A });\A })\A .first().attr('aria-selected','true').end()\A .find('button).attr(role','button').end()\A .closest('div).attr(role','toolbar');\A }\A _.activateADA();\A\A };\A\A Slick.prototype.initArrowEvents = function() {\A\A var _ = this;\A\A if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\A _.$prevArrow\A .off('click.slick')\A .on('click.slick',{\A message: 'previous'\A },_.changeSlide);\A _.$nextArrow\A .off('click.slick')\A .on('click.slick',{\A message: 'next'\A },_.changeSlide);\A }\A\A };\A\A Slick.prototype.initDotEvents = function() {\A\A var _ = this;\A\A if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\A $('li',_.$dots).on('click.slick',{\A message: 'index'\A },_.changeSlide);\A }\A\A if ( _.options.dots === true && _.options.pauseOnDotsHover === true ) {\A\A $('li',_.$dots)\A .on('mouseenter.slick',$.proxy(_.interrupt,_,true))\A .on('mouseleave.slick',$.proxy(_.interrupt,_,false));\A\A }\A\A };\A\A Slick.prototype.initSlideEvents = function() {\A\A var _ = this;\A\A if ( _.options.pauseOnHover ) {\A\A _.$list.on('mouseenter.slick',$.proxy(_.interrupt,_,true));\A _.$list.on('mouseleave.slick',$.proxy(_.interrupt,_,false));\A\A }\A\A };\A\A Slick.prototype.initializeEvents = function() {\A\A var _ = this;\A\A _.initArrowEvents();\A\A _.initDotEvents();\A _.initSlideEvents();\A\A _.$list.on('touchstart.slick mousedown.slick',{\A action: 'start'\A },_.swipeHandler);\A _.$list.on('touchmove.slick mousemove.slick',{\A action: 'move'\A },_.swipeHandler);\A _.$list.on('touchend.slick mouseup.slick',{\A action: 'end'\A },_.swipeHandler);\A _.$list.on('touchcancel.slick mouseleave.slick',{\A action: 'end'\A },_.swipeHandler);\A\A _.$list.on('click.slick',_.clickHandler);\A\A $(document).on(_.visibilityChange,$.proxy(_.visibility,_));\A\A if (_.options.accessibility === true) {\A _.$list.on('keydown.slick',_.keyHandler);\A }\A\A if (_.options.focusOnSelect === true) {\A $(_.$slideTrack).children().on('click.slick',_.selectHandler);\A }\A\A $(window).on('orientationchange.slick.slick-' + _.instanceUid,$.proxy(_.orientationChange,_));\A\A $(window).on('resize.slick.slick-' + _.instanceUid,$.proxy(_.resize,_));\A\A $('[draggable!=true]',_.$slideTrack).on('dragstart',_.preventDefault);\A\A $(window).on('load.slick.slick-' + _.instanceUid,_.setPosition);\A $(document).on('ready.slick.slick-' + _.instanceUid,_.setPosition);\A\A };\A\A Slick.prototype.initUI = function() {\A\A var _ = this;\A\A if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\A\A _.$prevArrow.show();\A _.$nextArrow.show();\A\A }\A\A if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\A\A _.$dots.show();\A\A }\A\A };\A\A Slick.prototype.keyHandler = function(event) {\A\A var _ = this;\A //Dont slide if the cursor is inside the form fields and arrow keys are pressed\A if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {\A if (event.keyCode === 37 && _.options.accessibility === true) {\A _.changeSlide({\A data: {\A message: _.options.rtl === true ? 'next' : 'previous'\A }\A });\A } else if (event.keyCode === 39 && _.options.accessibility === true) {\A _.changeSlide({\A data: {\A message: _.options.rtl === true ? 'previous' : 'next'\A }\A });\A }\A }\A\A };\A\A Slick.prototype.lazyLoad = function() {\A\A var _ = this,\A loadRange,cloneRange,rangeStart,rangeEnd;\A\A function loadImages(imagesScope) {\A\A $('img[data-lazy]',imagesScope).each(function() {\A\A var image = $(this),\A imageSource = $(this).attr('data-lazy'),\A imageToLoad = document.createElement('img');\A\A imageToLoad.onload = function() {\A\A image\A .animate({ opacity: 0 },100,function() {\A image\A .attr('src',imageSource)\A .animate({ opacity: 1 },200,function() {\A image\A .removeAttr('data-lazy')\A .removeClass('slick-loading');\A });\A _.$slider.trigger('lazyLoaded',[_,image,imageSource]);\A });\A\A };\A\A imageToLoad.onerror = function() {\A\A image\A .removeAttr( 'data-lazy' )\A .removeClass( 'slick-loading' )\A .addClass( 'slick-lazyload-error' );\A\A _.$slider.trigger('lazyLoadError',[ _,image,imageSource ]);\A\A };\A\A imageToLoad.src = imageSource;\A\A });\A\A }\A\A if (_.options.centerMode === true) {\A if (_.options.infinite === true) {\A rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);\A rangeEnd = rangeStart + _.options.slidesToShow + 2;\A } else {\A rangeStart = Math.max(0,_.currentSlide - (_.options.slidesToShow / 2 + 1));\A rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;\A }\A } else {\A rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;\A rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);\A if (_.options.fade === true) {\A if (rangeStart > 0) rangeStart--;\A if (rangeEnd <= _.slideCount) rangeEnd++;\A }\A }\A\A loadRange = _.$slider.find('.slick-slide').slice(rangeStart,rangeEnd);\A loadImages(loadRange);\A\A if (_.slideCount <= _.options.slidesToShow) {\A cloneRange = _.$slider.find('.slick-slide');\A loadImages(cloneRange);\A } else\A if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {\A cloneRange = _.$slider.find('.slick-cloned').slice(0,_.options.slidesToShow);\A loadImages(cloneRange);\A } else if (_.currentSlide === 0) {\A cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);\A loadImages(cloneRange);\A }\A\A };\A\A Slick.prototype.loadSlider = function() {\A\A var _ = this;\A\A _.setPosition();\A\A _.$slideTrack.css({\A opacity: 1\A });\A\A _.$slider.removeClass('slick-loading');\A\A _.initUI();\A\A if (_.options.lazyLoad === 'progressive') {\A _.progressiveLazyLoad();\A }\A\A };\A\A Slick.prototype.next = Slick.prototype.slickNext = function() {\A\A var _ = this;\A\A _.changeSlide({\A data: {\A message: 'next'\A }\A });\A\A };\A\A Slick.prototype.orientationChange = function() {\A\A var _ = this;\A\A _.checkResponsive();\A _.setPosition();\A\A };\A\A Slick.prototype.pause = Slick.prototype.slickPause = function() {\A\A var _ = this;\A\A _.autoPlayClear();\A _.paused = true;\A\A };\A\A Slick.prototype.play = Slick.prototype.slickPlay = function() {\A\A var _ = this;\A\A _.autoPlay();\A _.options.autoplay = true;\A _.paused = false;\A _.focussed = false;\A _.interrupted = false;\A\A };\A\A Slick.prototype.postSlide = function(index) {\A\A var _ = this;\A\A if( !_.unslicked ) {\A\A _.$slider.trigger('afterChange',[_,index]);\A\A _.animating = false;\A\A _.setPosition();\A\A _.swipeLeft = null;\A\A if ( _.options.autoplay ) {\A _.autoPlay();\A }\A\A if (_.options.accessibility === true) {\A _.initADA();\A }\A\A }\A\A };\A\A Slick.prototype.prev = Slick.prototype.slickPrev = function() {\A\A var _ = this;\A\A _.changeSlide({\A data: {\A message: 'previous'\A }\A });\A\A };\A\A Slick.prototype.preventDefault = function(event) {\A\A event.preventDefault();\A\A };\A\A Slick.prototype.progressiveLazyLoad = function( tryCount ) {\A\A tryCount = tryCount || 1;\A\A var _ = this,\A $imgsToLoad = $( 'img[data-lazy]',_.$slider ),\A image,\A imageSource,\A imageToLoad;\A\A if ( $imgsToLoad.length ) {\A\A image = $imgsToLoad.first();\A imageSource = image.attr('data-lazy');\A imageToLoad = document.createElement('img');\A\A imageToLoad.onload = function() {\A\A image\A .attr( 'src',imageSource )\A .removeAttr('data-lazy')\A .removeClass('slick-loading');\A\A if ( _.options.adaptiveHeight === true ) {\A _.setPosition();\A }\A\A _.$slider.trigger('lazyLoaded',[ _,image,imageSource ]);\A _.progressiveLazyLoad();\A\A };\A\A imageToLoad.onerror = function() {\A\A if ( tryCount < 3 ) {\A\A /**\A * try to load the image 3 times,\A * leave a slight delay so we don't get * servers blocking the request. */ setTimeout(function() { _.progressiveLazyLoad(tryCount + 1); },500)};
Slick.prototype.refresh = function( initializing ){var_:this,currentSlide,lastVisibleIndex;lastvisibleindex:_.slideCount - _.options.slidesToShow}// if less slides than to show,go to start.
if ( _.slideCount <= _.options.slidesToShow ){_currentslide:0}currentSlide = _.currentSlide;
_.destroy(true);
$.extend(_,_.initials,{currentslide:currentSlide});
_.init();
if( !initializing ){_changeslidedata:{ message: index,index: currentSlide};
Slick.prototype.registerBreakpoints = function(){var_:this,breakpoint,currentBreakpoint,l,responsiveSettings = _.options.responsive || null;iftyperesponsivesettings:== array && responsiveSettings.length ) { _.respondTo = _.options.respondTo || window;forbreakpointinresponsivesettingsl:_.breakpoints.length-1;currentbreakpoint:responsiveSettings[breakpoint].breakpoint;ifresponsivesettingshasownpropertybreakpoint//loopthroughthebreakpointsandcutoutanyexisting//oneswiththesamebreakpointnumberwedontwantdupeswhilel:0 ) { if(_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) { _.breakpoints.splice(l,1)}_.breakpoints.sort(function(a,b){return_optionsmobilefirsta-b:b-a};
Slick.prototype.reinit = function(){var_:this;_slides:_.$slideTrack .children(_.options.slide) .addClass(slick-slide);_slidecount:_.$slides.length;if_currentslide:_.slideCount && _.currentSlide !== 0) { _.currentSlide = _.currentSlide - _.options.slidesToScroll}if (_.slideCount <= _.options.slidesToShow){_currentslide:0};
Slick.prototype.resize = function(){var_:this;ifwindowwidth:= _.windowWidth) { clearTimeout(_.windowDelay);_windowdelay:window.setTimeout(function() { _.windowWidth = $(window).width(); _.checkResponsive(); if(!_.unslicked) { _.setPosition(); } },50)};
Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index,removeBefore,removeAll){var_:this;iftypeofindex:== boolean) { removeBefore = index;index:removeBefore === true ? 0 : _.slideCount - 1}else{index:removeBefore === true ? --index : index};
Slick.prototype.setCSS = function(position){var_:this,positionProps = {},x,y;
if (_.options.rtl === true){position:-position}else{positionprops:{};
if (_.cssTransitions === false){positionprops_animtype:translate( + x + ',' + y + )}else{positionprops_animtype:translate3d( + x + ',' + y + ',0px)'};
Slick.prototype.setDimensions = function(){var_:this;if_optionsvertical:== false) { if (_.options.centerMode === true) { _.$list.css({ padding: ('0px ' + _.options.centerPadding) })}else{if_optionscentermode:== true) { _.$list.css({ padding: (_.options.centerPadding + ' 0px') })}_.listWidth = _.$list.width();
_.listHeight = _.$list.height();
if (_.options.vertical === false && _.options.variableWidth === false){_slidewidth:Math.ceil(_.listWidth / _.options.slidesToShow)}else{_slidewidth:Math.ceil(_.listWidth)};
Slick.prototype.setFade = function(){var_:this,targetLeft;_slideseachfunctionindexelementtargetleft:(_.slideWidth * index) * -1;if_optionsrtl:== true) { $(element).css({ position: 'relative',right: targetLeft,top: 0,zIndex: _.options.zIndex - 2,opacity: 0 })}else{$elementcssposition:relative,;left:targetLeft,;top:0,zIndex: _.options.zIndex - 2,;opacity:0});
_.$slides.eq(_.currentSlide).css({zindex:_.options.zIndex - 1,;opacity:1};
Slick.prototype.setHeight = function(){var_:this;if_optionsslidestoshow:== 1 && _.options.adaptiveHeight === true && _.options.vertical === false) { var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true)};
Slick.prototype.setOption =
Slick.prototype.slickSetOption = function(){var_:this,l,item,option,value,refresh = false,type;iftypearguments0:== object ) { option = arguments[0];refresh:arguments[1];type:multiple}else if ( $.type( arguments[0] ) === string ){option:arguments[0];value:arguments[1];refresh:arguments[2];ifarguments0:== responsive && $.type(arguments[1]) === array ) { type = responsive}else if ( typeof arguments[1] !== undefined ){type:single}if ( type === single ){_optionsoption:value}else if ( type === multiple ){$eachoptionfunctionoptval_optionsopt:val}else if ( type === responsive ){foriteminvalueiftype_optionsresponsive:= array ) { _.options.responsive = [ value[item] ]}else{l:_.options.responsive.length-1};
Slick.prototype.setPosition = function(){var_:this;if_optionsfade:== false) { _.setCSS(_.getLeft(_.currentSlide))};
Slick.prototype.setProps = function(){var_:this,bodyStyle = document.body.style;_positionprop:_.options.vertical === true ? top : left;if_positionprop:== top) { _.$slider.addClass(slick-vertical)}if (bodyStyle.WebkitTransition !== undefined ||
bodyStyle.MozTransition !== undefined ||
bodyStyle.msTransition !== undefined){if_optionsusecss:== true) { _.cssTransitions = true}if ( _.options.fade ){iftypeof_optionszindex:== number ) { if(_.options.zIndex < 3) { _.options.zIndex = 3}else{_optionszindex:_.defaults.zIndex}if (bodyStyle.OTransform !== undefined){_animtype:OTransform;_transformtype:-o-transform;_transitiontype:OTransition;ifbodystyleperspectiveproperty:== undefined && bodyStyle.webkitPerspective === undefined) _.animType = false}if (bodyStyle.MozTransform !== undefined){_animtype:MozTransform;_transformtype:-moz-transform;_transitiontype:MozTransition;ifbodystyleperspectiveproperty:== undefined && bodyStyle.MozPerspective === undefined) _.animType = false}if (bodyStyle.webkitTransform !== undefined){_animtype:webkitTransform;_transformtype:-webkit-transform;_transitiontype:webkitTransition;ifbodystyleperspectiveproperty:== undefined && bodyStyle.webkitPerspective === undefined) _.animType = false}if (bodyStyle.msTransform !== undefined){_animtype:msTransform;_transformtype:-ms-transform;_transitiontype:msTransition;ifbodystylemstransform:== undefined) _.animType = false}if (bodyStyle.transform !== undefined && _.animType !== false){_animtype:transform;_transformtype:transform;_transitiontype:transition};
Slick.prototype.setSlideClasses = function(index){var_:this,centerOffset,allSlides,indexOffset,remainder;allslides:_.$slider .find(.slick-slide) .removeClass('slick-active slick-center slick-current') .attr(aria-hidden,'true');if_optionscentermode:== true) { centerOffset = Math.floor(_.options.slidesToShow / 2);if_optionsinfinite:== true) { if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) { _.$slides .slice(index - centerOffset,index + centerOffset + 1) .addClass(slick-active) .attr(aria-hidden,'false')}else{indexoffset:_.options.slidesToShow + index}else{ifindex:0 && index <= (_.slideCount - _.options.slidesToShow)) { _.$slides .slice(index,index + _.options.slidesToShow) .addClass(slick-active) .attr(aria-hidden,'false')}else{remainder:_.slideCount % _.options.slidesToShow;indexoffset:_.options.infinite === true ? _.options.slidesToShow + index : index;if_optionsslidestoshow:= _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) { allSlides .slice(indexOffset - (_.options.slidesToShow - remainder),indexOffset + remainder) .addClass(slick-active) .attr(aria-hidden,'false')};
Slick.prototype.setupInfinite = function(){var_:this,i,slideIndex,infiniteCount;if_optionsfade:== true) { _.options.centerMode = false}if (_.options.infinite === true && _.options.fade === false){slideindex:null;if_slidecount_optionsslidestoshowif_optionscentermode:== true) { infiniteCount = _.options.slidesToShow + 1}else{infinitecount:_.options.slidesToShow}for (i = _.slideCount; i > (_.slideCount -
infiniteCount); i -= 1){slideindex:i - 1}for (i = 0; i < infiniteCount; i += 1){slideindex:i};
Slick.prototype.interrupt = function( toggle ){var_:this};
Slick.prototype.selectHandler = function(event){var_:this;vartargetelement:$(event.target).is(.slick-slide) ? $(event.target) : $(event.target).parents(.slick-slide);varindex:parseInt(targetElement.attr(data-slick-index));ifindexindex:0;if_slidecount:_.options.slidesToShow) { _.setSlideClasses(index)};
Slick.prototype.slideHandler = function(index,sync,dontAnimate){vartargetslideanimslideoldslideslidelefttargetleft:null,_ = this,navTarget;sync:sync || false;if_animating:== true && _.options.waitForAnimate === true) { return}targetSlide = index;
targetLeft = _.getLeft(targetSlide);
slideLeft = _.getLeft(_.currentSlide);
_.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;
if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)){if_optionsfade:== false) { targetSlide = _.currentSlide;ifdontanimate:= true) { _.animateSlide(slideLeft,function() { _.postSlide(targetSlide); })}else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))){if_optionsfade:== false) { targetSlide = _.currentSlide;ifdontanimate:= true) { _.animateSlide(slideLeft,function() { _.postSlide(targetSlide); })}if (targetSlide < 0){if_slidecount_optionsslidestoscroll:= 0) { animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll)}else{animslide:_.slideCount + targetSlide}else if (targetSlide >= _.slideCount){if_slidecount_optionsslidestoscroll:= 0) { animSlide = 0}else{animslide:targetSlide - _.slideCount}else{animslide:targetSlide}_.animating = true;
_.$slider.trigger(beforeChange,[_,_.currentSlide,animSlide]);
oldSlide = _.currentSlide;
_.currentSlide = animSlide;
_.setSlideClasses(_.currentSlide);
if ( _.options.asNavFor ){navtarget:navTarget.slick(getSlick);ifnavtargetslidecount:navTarget.options.slidesToShow ) { navTarget.setSlideClasses(_.currentSlide)}_.updateDots();
_.updateArrows();
if (_.options.fade === true){ifdontanimate:= true) { _.fadeSlideOut(oldSlide)};
Slick.prototype.startLoad = function(){var_:this;if_optionsarrows:== true && _.slideCount > _.options.slidesToShow) { _.$prevArrow.hide()};
Slick.prototype.swipeDirection = function(){varxdistydistrswipeangle_:this;xdist:_.touchObject.startX - _.touchObject.curX;ydist:_.touchObject.startY - _.touchObject.curY;r:Math.atan2(yDist,xDist);swipeangle:Math.round(r * 180 / Math.PI);ifswipeangle0swipeangle:360 - Math.abs(swipeAngle)}if ((swipeAngle <= 45) && (swipeAngle >= 0)){return_optionsrtl:== false ? left : right)}if ((swipeAngle <= 360) && (swipeAngle >= 315)){return_optionsrtl:== false ? left : right)}if ((swipeAngle >= 135) && (swipeAngle <= 225)){return_optionsrtl:== false ? right : left)}if (_.options.verticalSwiping === true){ifswipeangle:35) && (swipeAngle <= 135)) { return down};
Slick.prototype.swipeEnd = function(event){var_:this,slideCount,direction;_dragging:false;_interrupted:false;_shouldclick:(_.touchObject.swipeLength > 10) ? false : true;if_touchobjectcurx:== undefined ) { return false}if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ){direction:_.swipeDirection();switchdirectioncaseleft:case down: slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();_currentdirection:1;caseright:case up: slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount()}if( direction != vertical ){_touchobject:{}else{if_touchobjectstartx:= _.touchObject.curX ) { _.slideHandler(_.currentSlide);_touchobject:{};
Slick.prototype.swipeHandler = function(event){var_:this;if_optionsswipe:== false) || (ontouchend in document && _.options.swipe === false)) { return}_.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
event.originalEvent.touches.length : 1;
_.touchObject.minSwipe = _.listWidth / _.options
.touchThreshold;
if (_.options.verticalSwiping === true){_touchobjectminswipe:_.listHeight / _.options .touchThreshold}switch (event.data.action){casestart:_.swipeStart(event);casemove:_.swipeMove(event);caseend:_.swipeEnd(event)};
Slick.prototype.swipeMove = function(event){var_:this,edgeWasHit = false,curLeft,swipeDirection,swipeLength,positionOffset,touches;touches:event.originalEvent !== undefined ? event.originalEvent.touches : null;if_draggingtouchestoucheslength:= 1) { return false}curLeft = _.getLeft(_.currentSlide);
_.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
_.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;
_.touchObject.swipeLength = Math.round(Math.sqrt(
Math.pow(_.touchObject.curX - _.touchObject.startX,2)));
if (_.options.verticalSwiping === true){_touchobjectswipelength:Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY,2)))}positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
if (_.options.verticalSwiping === true){positionoffset:_.touchObject.curY > _.touchObject.startY ? 1 : -1}swipeLength = _.touchObject.swipeLength;
_.touchObject.edgeHit = false;
if (_.options.infinite === false){if_currentslide:== 0 && swipeDirection === right) || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) { swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;_touchobjectedgehit:true}if (_.options.vertical === false){_swipeleft:curLeft + swipeLength * positionOffset}else{_swipeleft:curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset}if (_.options.verticalSwiping === true){_swipeleft:curLeft + swipeLength * positionOffset}if (_.animating === true){_swipeleft:null};
Slick.prototype.swipeStart = function(event){var_:this,touches;_interrupted:true;if_touchobjectfingercount:= 1 || _.slideCount <= _.options.slidesToShow) { _.touchObject = {}if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined){touches:event.originalEvent.touches[0]};
Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function(){var_:this;if_slidescache:= null) { _.unload()};
Slick.prototype.unload = function(){var_:this};
Slick.prototype.unslick = function(fromBreakpoint){var_:this};
Slick.prototype.updateArrows = function(){var_:this,centerOffset;centeroffset:Math.floor(_.options.slidesToShow / 2);if_optionsarrows:== true && _.slideCount > _.options.slidesToShow && !_.options.infinite ) { _.$prevArrow.removeClass(slick-disabled).attr(aria-disabled,'false');if_currentslide:== 0) { _.$prevArrow.addClass(slick-disabled).attr(aria-disabled,'true')};
Slick.prototype.updateDots = function(){var_:this;if_dots:= null) { _.$dots .find(li) .removeClass(slick-active) .attr(aria-hidden,'true')};
Slick.prototype.visibility = function(){var_:this;if_optionsautoplayifdocument_hidden_interrupted:true}else{_interrupted:false};
$.fn.slick = function(){var_:this,opt = arguments[0],args = Array.prototype.slice.call(arguments,1),l = _.length,i,ret;fori:0;iiftypeofopt:= object || typeof opt == undefined) _[i].slick = new Slick(_[i],opt);elseret:_[i].slick[opt].apply(_[i].slick,args);iftypeofret:undefined) return ret}
